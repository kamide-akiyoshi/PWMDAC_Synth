
[PWMDAC_Synth - PWM DAC synthesizer library for Arduino]

ver.20150913

Arduinoで動作する簡易シンセサイザライブラリです。

https://osdn.jp/users/kamide/pf/PWMDAC_Synth/wiki/FrontPage

これは CAmiDion

  http://www.yk.rim.or.jp/~kamide/music/chordhelper/hardware/

の２号機以降で実装した音源をライブラリ化したものです。


●Arduinoで楽器を作ろうとして、こんな問題にぶち当たったことはありませんか？

・音を出すなら tone() が手っ取り早いけど、和音が出ない…

・analogWrite() で PWM 出力しても、パルス波の周波数が490Hzと
  低すぎるから、1kHz前後の音なんて乗せられない、どうしよう…

そんな問題も、AVRのプリスケーラ（分周器）の設定を変えて
パルス波の周波数を最大にすれば一気に解決。

このライブラリは、規則正しい最速の周期で発生させたタイマー割り込みで、
その瞬間の波の高さに応じ、PWMのパルス幅を毎回リアルタイムに
素早く更新することにより、矩形波だけでなく色々な波形の音を出力します。

外部音源チップなしで Arduino 本体そのものに
シンセサイザの音源を実装したいときに活用してください。


●インストール

展開した PWMDAC_Synth フォルダを下記のフォルダに
置くだけでインストールできます。

	マイドキュメント\Arduino\libraries\

置いた後、Arduino IDE のメニュー [ファイル] → [スケッチの例] に
PWMDAC_Synth が現れることを確認してください。

●出力ピン(PWM)

（PWMDAC_Synth.h 参照）

PWMDAC_Synth.h をインクルードする前に、PWM 出力する Arduino ピン番号を
#define PWMDAC_OUTPUT_PIN で定義してください。

例：
	#define PWMDAC_OUTPUT_PIN 3
	#include <PWMDAC_Synth.h>

指定できるピン番号は 3,9,10,11 のいずれかです。

3,11 を選択した場合は TIMER2、9,10 を選択した場合は TIMER1 が使われます。

なお、5,6 は PWM 端子であっても指定できません。
これは TIMER0 用の ISR() が Arduino の millis() などのために使われていて
再定義できなかったためです。

PWM 出力ピンは、そのまま PC の LINE IN などにつないでも一応音は聞こえますが、
ローパスフィルタで可聴周波数だけを通すようにすると、より聞きやすくなります。


●使い方

・呼び出し側では、最低限、下記の2点を実装する必要があります。

	・setup() の中で PWM_SYNTH.setup() を使って初期化します。

	・loop() の中で PWM_SYNTH.updateEnvelopeStatus() を定期的に呼び出します。
		これは減衰などのADSRエンベロープ形状の現在位置を一つ進めたり、
		モジュレーションによって変化する時間ごとの周波数を更新するための関数です。
		呼び出し頻度は自分でカウンタを用意するなどの方法でコントロールしてください。

	付属のサンプルスケッチ（examples/*.ino）に実装例があります。

	電子楽器 CAmiDion など、実際に PWMDAC_Synth を使っているスケッチも
	参考にしてください。

	使える関数については PWMDAC_Synth.h を参照してください。


・MIDIチャンネル操作

	PWM_SYNTH のメソッドで、

		MIDIチャンネル番号(1〜16) ⇔ MIDIチャンネルへのポインタ

	を相互変換できます。

	MidiChannel *getChannel(char channel)
	char getChannel(MidiChannel *cp)

	MIDIチャンネルへのポインタは、主に波形やエンベロープパラメータと
	いった、次回以降の音出し以降に反映するパラメータの設定に使います。

	NOTE OFF、NOTE ON、ピッチベンドは、今出ている音にリアルタイムに
	反映されるよう、PWM_SYNTH のメソッドからしか操作できないように
	なっています。


・MIDI関数

	PWM_SYNTH 静的オブジェクトには、MIDIライブラリの MIDI.setHandleXxxx() に
	直接指定できるよう、引数の順序や型を合わせた関数をいくつか用意しています。

	ただし、接続相手のMIDIデバイスによっては、NOTE OFF の代わりに
	velocity=0 の NOTE ON を送ってくることがあるので、その場合だけ
	NOTE OFF を呼び出すといった工夫が必要になります。

	MIDIチャンネル番号は、MIDIライブラリに合わせて 1〜16 の範囲で
	指定するように作ってあります。


・音色変更
	プログラムチェンジには対応していません。
	代わりににエンベロープパラメータと波形を指定して音色を変更します。
	（MidiChannel クラスの wavetable や env_param で指定します）

	エンベロープパラメータは EnvelopeParam 構造体を介して行います。

	・attack_speed - アタック速度（小さいほどアタックタイムがゆっくり）
	・decay_time - ディケイ時間（大きいほどノートオン後の減衰がゆっくり）
	・sustain_level - サスティンレベル（減衰が止まったあと維持する音量）
	・release_time - リリース時間（大きいほどノートオフ後の減衰がゆっくり）

	なお、これらの時間は loop() 内で updateEnvelopeStatus() を呼び出す
	頻度によって変わります。

	波形は、PROGMEM 配列（要素数256のbyte型に限る）を指定して行います。

	和音によって音が重なったとき、レベルが 255 を超えると
	音割れの原因になります。同時発音数（デフォルト：６重和音）で
	割った小さめの値で波形を作るようにしてください。
	なお、PWM_SYNTH にも組み込みの波形配列があるので
	これを指定すると簡単です。

	・sineWavetable[]	正弦波
	・squareWavetable[]	矩形波
	・triangleWavetable[]	三角波
	・sawtoothWavetable[]	のこぎり波
	・shepardToneSineWavetable[]	正弦波の無限音階（シェパードトーン）

・ユーティリティ
	byte musicalMod7(char x)
	byte musicalMod12(char x)
		それぞれ7で割った余り、12で割った余りを返します。
		% 演算子と違い、負数を与えても正数で返します。
		内部的にはビット演算と加算だけで高速に計算します。
		音階の計算に便利です。

	byte log2(unsigned int x)
		２を底とする対数を、小数点以下を切捨てた整数で返します。
		y = log2(x) と x = 1 << y は逆関数の関係になります。

	int musicalConstrain12(int note, int min_note, int max_note)
		Arduino の constrain() を音階用に実装し直した関数。
		note が min_note 〜 max_note の音域にあれば
		note をそのまま返します。音域をはみ出していた場合、
		音階を変えずにオクターブ位置を変えることにより、
		範囲に収まるよう調整されます。

●更新履歴

	ver.20150913
		・ピッチベンド・センシティビティに対応
		・その他ソースの整理・リファクタリング

	var.20130327
		・新しいvoiceを割り当てる際に発声中のvoiceが横取りされて
			しまうことがある不具合を修正

		・ユーティリティ関数 musicalConstrain12() を追加

	var.20130113
		・モジュレーションのゆらぎ周期を
			変数 PWM_SYNTH.modulation_dphase で調整できるようにしました。
		・リリース後に音（余韻）が鳴っているときにアタックをかけても
			音色が変わらない不具合の修正

	var.20130112
		・ピッチベンドが中央値から外れているときに NOTE ON すると
			実際のピッチが中央値に戻されてしまう不具合の修正
		・ユーティリティ関数 log2() を追加
		・MidiChannelクラスの外出し、関数を .h に出してインライン化、など

	var.20121110
		・ノート番号０（最小：ものすごく低い 8Hz くらいの音階）を
			与えたときドではなくミの音になってしまうバグを修正

		・ユーティリティ関数 musicalMod7() を追加

	var.20121108
		・ユーティリティ関数 musicalMod12() を追加し、内部的にも
			これを使うようにしました。

	ver.20121029
		・内部処理のチューニング（不要な初期化の省略など）

	ver.20121013
		・出力 PWM 端子の変更を、呼び出し側スケッチでできるようにしました。
			（それまではライブラリを書き換えないとできませんでした）
		・内部ルーチンの整理

	ver.20120805
		・getEnvelope()、getWave() を追加

	ver.20120719
		・出力 PWM 端子を４つの中から選択できるようにしました
			（旧：3 のみ → 新：3,9,10,11 から選択可）。

	ver.20120716
		・正弦波、矩形波、三角波、のこぎり波の波形テーブルを
			ライブラリに組み込みました。

	ver.20120611
		・波形の指定方法を変更しました。
			波形テーブルにRAMを使わず全面的にPROGMEM化（フラッシュメモリへ移動）
			したことに伴い、波形テーブルを関数で指定するインターフェースを廃止し、
			代わりにPROGMEM配列の波形テーブル（呼び出し側で準備が必要）を指定する
			インターフェースにしました。
			これによりRAM領域が削減されたほか、MIDIチャンネルごとに
			波形を違うものにすることが可能になりました。

	ver.20120609
		・周波数計算の見直し
			Phase correct（＝位相基準）PWM ではタイマーカウンタ(TCNT2)が
			三角波を描くように変わりますが、上下の頂点だけ１少ないので
			実際は512クロックではなく510クロックごとに割り込みが発生
			することが判明しました。これを踏まえて基準値を調整しました。

	ver.20120607
		・割り込み処理の高速化。
			PWM割り込みでISR()から呼ばれる nextPulseWidth() 関数から
			８ビットシフトの演算をループ外へ追い出した。

		・TIMER0を止める処理をコメントアウト

	ver.20120321
		・波形変更をsetWave()関数に一本化

	ver.20120318(初期版)


作者：＠きよし - Akiyoshi Kamide
	http://www.yk.rim.or.jp/~kamide/
